@use "./variables.scss";
@use "./duration.scss";
@use "./timer.scss";
@use "./growing_input.scss";
@use "./pages/home.scss";
@use "./icon.scss";
@use "./progress.scss";

:root {
    background: var(--bg);
    color: var(--clr-text);

    font-family: Inter, "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    // from https://utopia.fyi/type/calculator/?c=320,12,1.2,1080,20,1.333,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12
    // can set everything else based on rem/em, don't need the others.
    // also like the relative scale better with rem/ems instead of the given scales.
    font-size: clamp(12px, calc(8.64px + 1.05vmin), 20px);
    line-height: 1.5;

    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-text-size-adjust: 100%;
}

*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html,
body,
.page {
    height: 100dvh;
    overflow: hidden;
}

input,
button {
    font: inherit;
    color: inherit;

    border: none;
    background-color: transparent;
    outline: transparent;
}

button {
    display: inline-grid;
    place-content: center;
}

input:focus-visible,
button:focus-visible {
    outline: var(--outline);
}

// scrollbars //

::-webkit-scrollbar {
	width: var(--scrollbar-size);
	height: var(--scrollbar-size);
}

::-webkit-scrollbar-thumb {
	background: var(--clr-neutral-200);
	border-radius: var(--scrollbar-size);

    transition: background-color var(--time-transition-short);

    &:hover {
        background: var(--clr-neutral-100);
    }

    &:active {
        background: var(--clr-neutral-50);
    }
}

::-webkit-scrollbar-track {
	background-color: transparent;
}

::-webkit-scrollbar-corner {
	background-color: transparent;
}


// main layout //

.page {
    display: grid;
    grid-template-rows: 1fr 3rem;
}

/// Element that provides contexts (position, z-index, fixed pos).
/// Takes up the viewport space excl. navbar
.context {
    position: relative;
    overflow: hidden;
    isolation: isolate;
    height: calc(100dvh - 3rem);

    // make fixed position elements relative to this
    transform: translate(0);

    /// Element that provides scrolling.
    /// Takes up the viewport space excl. navbar
    .scroller {
        overflow-y: auto;
        position: relative;
        height: 100%;
    }

    /// Element inside the scroller that takes up however much it needs,
    /// filling or overflowing the scroller
    main {
        position: relative;
        min-height: 100%;
        display: grid;
    }

    /// elements used to figure out whether there is stuff to scroll to
    /// relative to the context element
    .intersection-edge {
        position: absolute;
        inset-inline: 0;
        height: 5px;

        &[data-edge="top"] {
            top: 0;
        }

        &[data-edge="bottom"] {
            bottom: 0;
        }
    }

    /// Shadows that show if there is overflow in that direction
    .scroll-shadow {
        --_shadow-clr: rgba(0 0 0 / 0.5);

        position: fixed;
        inset-inline: 0;
        height: 1rem;

        z-index: 1;

        transition: opacity var(--time-transition);

        &[data-edge="top"] {
            top: 0;
            background: linear-gradient(var(--_shadow-clr), transparent);
        }

        &[data-edge="bottom"] {
            bottom: 0;
            background: linear-gradient(transparent, var(--_shadow-clr));
        }
    }
}

nav {
    display: flex;
    justify-content: space-around;
    align-items: center;
    z-index: 1;
    background-color: var(--clr-neutral-600);

    // TODO make this a mixin?
    .add {
        background-color: var(--clr-green-800);
        color: var(--clr-green-200);

        height: 1lh;
        aspect-ratio: 3;
        border-radius: 1lh;

        transition-property: color background-color;
        transition-duration: var(--time-transition);
        transition-timing-function: ease-out;

        &:hover {
            background-color: var(--clr-green-700);
            color: var(--clr-green-100);
        }

        &:active {
            background-color: var(--clr-green-400);
            color: var(--clr-green-800);
        }
    }

    .remove {
        background-color: var(--clr-red-800);
        color: var(--clr-red-200);

        height: 1lh;
        aspect-ratio: 3;
        border-radius: 1lh;

        transition-property: color background-color;
        transition-duration: var(--time-transition);
        transition-timing-function: ease-out;

        &:hover {
            background-color: var(--clr-red-700);
            color: var(--clr-red-100);
        }

        &:active {
            background-color: var(--clr-red-400);
            color: var(--clr-red-800);
        }
    }
}
